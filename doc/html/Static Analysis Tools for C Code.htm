<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0115)https://webcache.googleusercontent.com/search -->
<HTML><HEAD><META content="IE=5.0000" http-equiv="X-UA-Compatible">

<META http-equiv="Content-Type" content="text/html; charset=UTF-8"> 
<STYLE type="text/css">body { margin-left:0;margin-right:0;margin-top:0; }#google-cache-hdr {background:#f5f5f5 !important;font:13px arial,sans-serif !important;text-align:left !important;color:#202020 !important;border:0 !important;margin:0 !important;border-bottom:1px solid #cecece !important;line-height:16px !important ;padding:16px 28px 24px 28px !important;}#google-cache-hdr * {display:inline !important;font:inherit !important;text-align:inherit !important;color:inherit !important;line-height:inherit !important;background:none !important;border:0 !important;margin:0 !important;padding:0 !important;letter-spacing:0 !important;}#google-cache-hdr a {text-decoration:none !important;color:#1a0dab !important;}#google-cache-hdr a:hover { text-decoration:underline !important; }#google-cache-hdr a:visited { color:#609 !important; }#google-cache-hdr div { display:block !important;margin-top:4px !important; }#google-cache-hdr b {font-weight:bold !important;display:inline-block !important;direction:ltr !important;}</STYLE>

<META name="GENERATOR" content="MSHTML 10.00.9200.16750"></HEAD>
<BODY background="Static%20Analysis%20Tools%20for%20C%20Code_files/static.htm">
<DIV id="google-cache-hdr" dir="ltr">
<DIV>This is Google's cache of <A dir="ltr" 
href="https://spinroot.com/static/">https://spinroot.com/static/</A>. It is a 
snapshot of the page as it appeared on 26 Apr 2016 22:54:06 GMT. </DIV>
<DIV>The <A dir="ltr" href="https://spinroot.com/static/">current page</A> could 
have changed in the meantime. <A href="http://support.google.com/websearch/bin/answer.py?hl=en&amp;p=cached&amp;answer=1687222">Learn 
more</A></DIV>
<DIV></DIV>
<DIV><SPAN style="margin-top: 8px !important; margin-right: 104px !important; display: inline-block !important; white-space: nowrap !important;"><SPAN 
style="margin-right: 28px !important;"><SPAN style="font-weight: bold !important;">Full 
version</SPAN></SPAN><SPAN style="margin-right: 28px !important;"><A href="http://webcache.googleusercontent.com/search?q=cache:1XfoWkdSrxYJ:https://spinroot.com/static/&amp;num=1&amp;hl=en&amp;strip=1&amp;vwsrc=0">Text-only 
version</A></SPAN><SPAN style="margin-right: 28px !important;"><A href="http://webcache.googleusercontent.com/search?q=cache:1XfoWkdSrxYJ:https://spinroot.com/static/&amp;num=1&amp;hl=en&amp;strip=0&amp;vwsrc=1">View 
source</A></SPAN></SPAN><SPAN style="color: rgb(113, 113, 113) !important; margin-top: 8px !important; display: inline-block !important;">Tip: 
To quickly find your search term on this page, press <B>Ctrl+F</B> or <B>⌘-F</B> 
(Mac) and use the find bar.</SPAN></DIV></DIV>
<DIV style="position: relative;"> 
<META name="category" content="Static Source Code Analysis Tools for C"> 
<META name="description" content="brief survey of commercial and academic static source code analysis tools"> 
<META name="keywords" content="static analysis, software analysis, verification, testing, analyzer,c,code,data,development,device,driver,embedded,emulators,programming,software,source,systems,tool,tools,slicer"> 
<TITLE>Static Analysis Tools for C Code</TITLE> <FONT face="Verdana">
<TABLE width="100%">
  <TBODY>
  <TR>
    <TD width="10%"></TD>
    <TD width="70%" align="center"></TR>
  <TR></TR>
  <TR>
    <TD width="10%"></TD>
    <TD width="70%" align="center">
      <HR color="red">

      <H1><TT><FONT color="#ff0000">Static Source Code Analysis Tools for 
      C</FONT></TT></H1>
      <HR color="red">
    </TD>
    <TD width="20%"></TD></TR>
  <TR>
    <TD width="10%"></TD>
    <TD width="70%">
      <UL>
        <LI>
        <H4><FONT color="#0000ff">The Leading Commercial Tools</FONT></H4>
        <UL>
          <LI><A href="http://semmle.com/">Semmle/ (Odasa)</A>	 <BR>	A 
          relatively new tool, based on the research of <A href="http://uk.linkedin.com/in/oegedemoor">Oege 
          de Moor</A>	at Oxford University's Computing Laboratory. The tool 
          takes a different approach	that can be quite effective. It first 
          constructs a database that captures all essential	information about a 
          (potentially large) application, and then allows the user to perform
          	queries on this database to verify the properties of interest. 
          Standard static analysis	queries are handled efficiently. With some 
          practice, the queries are not that hard to	write, and a large 
          selection of predefined queries comes with the tool that can fairly
          	easily be adapted to local requirements. Rule checkers for the	 <A 
          href="http://spinroot.com/p10">Power of Ten coding rules</A> are 
          provided,	which makes it attractive for checking and maintaining high 
          integrity applications.	The tool gives accurate results and, once the 
          database	is built for a new application, queries are resolved very 
          fast.	Recommended, especially if you want to develop your own queries.
	 
          <LI><A href="http://coverity.com/">Coverity</A>	 <BR>	A popular tool 
          based on <A href="http://www.stanford.edu/~engler/">Dawson 
          Engler</A>'s	methodology for source code analysis of large code bases. 
          An extended version	of the tool (Coverity Extend) supports 
          user-defined properties	written in a successor to Dawson's Metal 
          language.	The tool is reasonably fast and returns few false positives.
          	The latest versions supports an option to choose between	three levels 
          of aggressiveness, with the number of reports increasing (and the
          	number of possible false positives going up) at the higher levels.
          	Recommended as a default checker, especially if no customization is 
          required.	 
          <LI><A href="http://www.grammatech.com/products/codesonar/overview.html">CodeSonar</A> 
          (by Grammatech)	 <BR>An effective tool for spotting code defects and 
          suspicious code fragments.	The tool also provides rules checkers for 
          the	 <A href="http://spinroot.com/p10">Power of Ten coding rules</A>.
          	Especially good at inter-procedural analysis. It can be slow on large 
          code bases.	A capability for user-defined checks is available.	 
          <LI><A href="http://klocwork.com/">KlocWork</A>	 <BR>	Support for 
          static error detection, with added project management	and project 
          visualization capabilities. Fast, almost as thorough as	Coverity, and 
          not quite as expensive. Especially good at finding array bound 
          violations.	A capability for user-defined checks is available, 
          including checkers for the	 <A href="http://spinroot.com/p10">Power of 
          Ten coding rules</A>.	 
          <LI><A href="http://frama-c.com/">Frama-C</A>	 <BR>	(From <A class="__cf_email__" 
          href="https://spinroot.com/cdn-cgi/l/email-protection" data-cfemail="dbbfb6beb5afa9be9bb7b2b5aea3f6bda9bab5b8bef5b4a9bc">[email&nbsp;protected]</A>
<SCRIPT type="text/javascript" data-cfhash="f9e31">/* <![CDATA[ */!function(t,e,r,n,c,a,p){try{t=document.currentScript||function(){for(t=document.getElementsByTagName('script'),e=t.length;e--;)if(t[e].getAttribute('data-cfhash'))return t[e]}();if(t&&(c=t.previousSibling)){p=t.parentNode;if(a=c.getAttribute('data-cfemail')){for(e='',r='0x'+a.substr(0,2)|0,n=2;a.length-n;n+=2)e+='%'+('0'+('0x'+a.substr(n,2)^r).toString(16)).slice(-2);p.replaceChild(document.createTextNode(decodeURIComponent(e)),c)}p.removeChild(t)}}catch(u){}}()/* ]]> */</SCRIPT>
          :) Frama-C is a framework for parsing and analysis of C code.	The 
          three main plug-ins are Value analysis (doing abstract interpretation
          	like PolySpace or Astrée) and WP and Jessie (doing program proof in a 
          Hoare-like framework).	Frama-C is used by companies like Airbus and 
          Dassault Aviation.	 
          <LI><A href="http://www.cppdepend.com/">CppDepend</A> A static 
          analysis tool for C and C++,	with a query language (CQLinq) and 
          SQL-like query engine, similar to Semmle.	 
          <LI><A href="http://www.polyspace.com/">PolySpace</A>	 <BR>	Originally 
          marketed by a French company co-founded by students of	 <A href="http://www.di.ens.fr/~cousot/">Patrick 
          Cousot</A>	(pioneer in the area of abstract interpretation).	The 
          company later became part of MathWorks and is now part of Matlab.
          	Polyspace claims it can intercept 100% of the runtime errors in C 
          programs.	(See <A href="http://www.polyspace.com/product_datasheet/cverifier.htm">
          	cverifier.htm</A>.)	Customers are in the airline industry and the 
          European space program.	Can be thorough, but also very slow, and does 
          not scale beyond	a few thousand lines of code. Does not support full 
          ANSI-C language	(e.g., it places restrictions on the use of gotos).	 
          <LI><A 
          href="http://www.rational.com/products/pqc/index.jsp">Purify</A> (by 
          Rational)	 <BR>	This tool is focused primarily on the detection of 
          memory leaks, and not on	general source code analysis. It is used 
          fairly broadly.	 
          <LI>The Lint family, e.g.	 <A href="http://www.gimpel.com/lintinfo.htm">PC-Lint/FlexeLint</A> 
          (by Gimpel),	 <A href="http://www.cleanscape.net/stdprod/lplus/">Lint 
          Plus</A> (by Cleanscape)	 <BR> Generic source code analysis, value 
          tracking, some types of array indexing errors.	Suffers from high, 
          sometimes very high, false positive rates, but the	output can be 
          customized with flags and code annotations.	 
          <LI><A href="http://research.microsoft.com/users/jpincus/icsm.ppt">
          	PREfix and PREfast</A> (Microsoft)	 <BR>	PREfix was developed by <A 
          href="http://research.microsoft.com/users/jpincus/">	Jon Pincus</A>;
          	MicroSoft acquired the tool when it bought Pincus' company.	PREfast 
          is a lighter weight tool, developed within Microsoft	as a faster 
          alternative to PREfix (though it is said not to be	directly based on 
          PREfix). Both tools are reported to be	effective in intercepting 
          defects early, and come with	filtering methods for the output to 
          reduce false positives.	PREfast allows for new defect patterns to be 
          defined via plugins.	Less than 10% of the code of PREfix is said to be 
          concerned with analysis	per se, most applies to the filtering and 
          presentation of output, to	reduce the number of false positives.	 
          <LI><A href="http://www.programmingresearch.com/">QAC</A> (by 
          Programming Research)	 <BR>Includes checkers for compliance with the 
          MISRA-2004 guidelines for	the development of C code. It does a 
          thorough job.	 
          <LI><A href="http://www.saferc.com/">Safer C</A> (by Oakwood 
          Computing)	 <BR>  Based on L. Hatton's 1995 book on Safer C, out of 
          print in the U.S.,	covering code analysis and enforcement of coding 
          guidelines. Not found to be too	useful in our tests.	 
          <LI><A href="http://www.redlizards.com/">Goanna</A> (by Red Lizard) 
          <FONT color="red">(new)</FONT> 	<BR>A new entry, based on model 
          checking of the control flow graph of C programs.	The technology is 
          similar to Bell Labs' early	 <A href="http://cm.bell-labs.com/cm/cs/what/feaver/index.html">FeaVer<A>
          	and <A href="http://cm.bell-labs.com/cm/cs/what/modex/">Modex</A> 
          tools	(which used Spin as the model checker in the verification of C 
          code).	Not evaluated.	 
          <LI><A href="http://www.viva64.com/">PVS-Studio</A> (not related to 
          the well-known	PVS theorem prover), a static analyzer for C and C++. 
          Not evaluated, but it is discussed	 <A href="https://spinroot.com/static/www.altdevblogaday.com/2011/12/24/static-code-analysis/">here</A>.
          	(thanks to Hubert Garavel for the reference).	 </LI></UL>
        <P></P>
        <LI>
        <H4><FONT color="#0000ff">Academic and Research tools</FONT></H4>
        <UL>
          <LI><A 
          href="http://www.cs.ubc.ca/~babic/index_calysto.htm">Calysto</A>
          		 <FONT color="red">(new)</FONT> a tool by Domagoj Babic	 
          <LI><A 
          href="http://saturn.stanford.edu/pages/relatedindex.html">Saturn</A>
          		 <FONT color="red">(new)</FONT> by Alex Aiken and others at 
          Stanford.	 
          <LI><A href="http://mygcc.free.fr/">mygcc</A> <FONT 
          color="red">(new)</FONT>	 <BR>	An extension of the gcc compiler 
          supporting user-defined		checks written in a simple formalism, that 
          can be checked efficiently.		Path queries can be run on the 
          control-flow graph of		functions, specifying a start node, a stop 
          node, and constraints on the		path in between.		Sample queries are 
          provided that match many of the ones used in Engler's		early study 
          using the Metal language (now supported by the Coverity tool).		A very 
          interesting project that will hopefully find its		way into the main 
          gcc distribution soon.	 
          <LI><A 
          href="http://research.compaq.com/SRC/esc/EscModula3.html">ESC</A> 
          (Compaq/HP)	 <BR>	Extended static checker for Java and for Modula3.
          		developed by <A 
          href="http://research.compaq.com/SRC/staff/gnelson/">		Greg Nelson</A> 
          and colleagues, which		is based on a mix of theorem proving and static 
          analysis.		It's thorough and effective, but also slow, and needs 
          considerable knowledge		to run. This tool does not target C, and 
          therefore does not properly		belong in this listing,		but we include 
          it as one of the landmark research tools in this domain.	 
          <LI><A 
          href="http://larch-www.lcs.mit.edu:8001/larch/lclint.html">LC-Lint</A>
          	 <BR>	The descendent of the early research Unix version of lint, 
          which was		written by Steve Johnson in 1979. This tool needs lots of 
          annotations to work well,		and often produces overwhelming amounts of 
          output. <!--
	<li><a href="http://www.ispras.ru/~knizhnik/jlint/">JLint</a>
		a lint-like checker for Java code.
-->
	 
          <LI><A href="http://research.microsoft.com/vault/">Vault</A> 
          (MicroSoft)	 <BR>	An experimental system, in development at MicroSoft 
          by		 <A href="http://research.microsoft.com/users/rdeline/">Rob 
          DeLine</A>		and <A href="http://research.microsoft.com/~maf/">Manuel 
          Fahndrich</A>.		It is based on formal annotations		placed in the code.
	 
          <LI><A href="http://www.astree.ens.fr/">Astree</A> (CNRS, France)
          	 <BR>	Astree is a static program analyzer for structured C programs,
          		but without support for dynamic memory allocation and recursion		(as 
          used, for instance for embedded systems and in safety		critical 
          systems).		The tool name is an acronym for Analyseur statique de
          		logiciels temps-reel embarques (static analyzer for		real-time 
          embedded software). Among those working on		this tool are Patrick and 
          Radhia Cousot.	 
          <LI><A href="http://ase.arc.nasa.gov/brat/cgs/">CGS</A> (C Global 
          Surveyor, NASA ARC)	 <BR>	An experimental tool at NASA Ames Research 
          Center from		 <A href="http://ase.arc.nasa.gov/brat/">Guillaume 
          Brat</A> and		 <A href="http://ase.arc.nasa.gov/people/venet/">Arnaud 
          Venet</A>,		based on abstract interpretation techniques, inspired by 
          Patrick Cousot.		Work in progress.	 
          <LI><A href="http://cm.bell-labs.com/cm/cs/what/smlnj/doc/ckit/index.html">C-Kit</A> 
          (Bell Labs).	 <BR>	A research toolkit developed at Bell Labs, with 
          algorithms for pointer alias analysis,		program slicing,		etc. for 
          ANSI C. Written in SML. Can produce parsetree and symbol table 
          information,		but, as yet, not call flow graphs or function call 
          graphs.		The principal researchers involved in this work		(<A href="http://cm.bell-labs.com/cm/cs/who/nch/">Nevin 
          Heintze</A>,		Jon Riecke, <A href="http://www.cs.uchicago.edu/people/dbm">Dave 
          MacQueen</A>)		are no longer at Bell Labs and development has stopped.
	 
          <LI><A href="http://spinroot.com/uno/"><FONT 
          color="blue">Uno</FONT></A> (Bell Labs)	 <BR>	Lightweight tool for 
          static analysis.		The tool is targeted at a small set of common 
          programming		defects (Uninitialized data, Nil-pointer dereferencing, 
          and		Out-of-bound array indexing, with the three initial letters 
          giving		the tool its name). It also handles a range of simple, 
          user-defined properties.	 
          <LI><A href="http://cm.bell-labs.com/cm/cs/what/orion/">Orion</A> 
          (Bell Labs)	 <BR>	Work in progress on an extension of Uno for C++, 
          based on gcc.	 </LI></UL>
        <P></P>
        <LI>
        <H4><FONT color="#0000ff">Other tools (Code Browsers; Development 
        Environments)</FONT></H4>
        <UL>
          <LI>Programming Style or Guidelines Checkers	 
          <UL>
            <LI><A href="http://www.parasoft.com/">Parasoft CodeWizard</A>	 
            <LI><A href="http://www.plumhall.com/">Plum Hall SQS</A>	 
            <LI><A href="http://www.bluestone-sw.com/">CheckMate</A>	 </LI></UL>
          <LI><A 
          href="http://www.grammatech.com/products/codesurfer/index.html">CodeSurfer</A>
          	 <BR>	Supports data dependence analysis, program slicing for C,
          		interprocedural flow analysis. The company was co-founded by		 <A 
          href="http://www.cs.wisc.edu/~reps/">Tom Reps</A>.		Very well done 
          GUI. Mostly research applications. See also CodeSonar above.	 
          <LI><A href="http://www.semdesigns.com/Products/Tools.html">Semantic 
          Designs</A>	 <BR>	Offers front-ends for many different languages,
          		Supports some flow analysis.  Geared towards code transformations
          		or re-engineering. Targets large code bases.	 </LI></UL>
        <P></P>
        <LI>
        <H4><FONT color="#0000ff">Links</FONT></H4>
        <UL>
          <LI><A 
          href="http://testingfaqs.org/t-static.html">http://testingfaqs.org/t-static.html</A> <!--
	<li><a href="http://www.dse.nl/~thelosen/artikelen/static_analysis.pdf">
		Short white paper on the construction of static analyzers</a>
	<li><a href="http://www.programming-x.com/programming/analyzer.html">
	Another overview of static analyzers</a>
	<li><a href="http://samate.nist.gov/index.php/Source_Code_Analyzers">
	Up-to-date overview of source code checkers</a>
-->
	 
          <LI><A href="http://en.wikipedia.org/wiki/List_of_tools_for_static_code_analysis">Wikipedia 
          entry</A>	 <FONT color="red">(new)</FONT> </LI></UL></LI></UL></TD>
    <TD width="20%"></TD></TR></TBODY></TABLE></FONT> 
<HR color="red">

<H4>Textbook</H4>
<UL>
<PRE><A href="http://www.amazon.com/exec/obidos/ASIN/3540654100/spinroot-20">F. Nielson, H. R. Nielson and C. Hankin,
Principles of Program Analysis,
ISBN 3-540-65410-0, Springer-Verlag.</A>
</PRE></UL>
<HR color="red">

<TABLE width="100%">
  <TBODY>
  <TR>
    <TD align="center">
      <OBJECT width="486" height="60" id="Player_a6239436-3f35-49a9-8ca1-aab5624d5283" 
      classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="http://fpdownload.macromedia.com/get/flashplayer/current/swflash.cab"><PARAM 
      name="movie" value="http://ws-na.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=US&amp;ID=V20070822%2FUS%2Fspinroot-20%2F8009%2Fa6239436-3f35-49a9-8ca1-aab5624d5283&amp;Operation=GetDisplayTemplate"><PARAM 
      name="quality" value="high"><PARAM name="bgcolor" value="#FFFFFF"><PARAM 
      name="allowscriptaccess" value="always"><EMBED name="Player_a6239436-3f35-49a9-8ca1-aab5624d5283" 
      width="486" height="60" align="middle" id="Player_a6239436-3f35-49a9-8ca1-aab5624d5283" 
      src="http://ws-na.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=US&amp;ID=V20070822%2FUS%2Fspinroot-20%2F8009%2Fa6239436-3f35-49a9-8ca1-aab5624d5283&amp;Operation=GetDisplayTemplate" 
      type="application/x-shockwave-flash" allowscriptaccess="always" bgcolor="#ffffff" 
      quality="high"> </OBJECT> <NOSCRIPT>&lt;A
       HREF="http://ws-na.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=US&amp;ID=V20070822%2FUS%2Fspinroot-20%2F8009%2Fa6239436-3f35-49a9-8ca1-aab5624d5283&amp;Operation=NoScript"&gt;Amazon.com
       Widgets&lt;/A&gt;</NOSCRIPT> </TD></TR></TBODY></TABLE>
<HR color="red">

<TABLE width="100%">
  <TBODY>
  <TR>
    <TD align="left">last update 30 October 2014 </TD>
    <TD align="right"><A href="http://spinroot.com/">spinroot.com</A> 
  </TD></TR></TBODY></TABLE></DIV></BODY></HTML>
