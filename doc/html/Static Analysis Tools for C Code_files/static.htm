<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<meta name="category" content="Static Source Code Analysis Tools for C">
<meta name="description" content="brief survey of commercial and academic static source code analysis tools">
<meta name="keywords" content="static analysis, software analysis, verification, testing, analyzer,c,code,data,development,device,driver,embedded,emulators,programming,software,source,systems,tool,tools,slicer">
<title>Static Analysis Tools for C Code</title>
</head>

<body background="#ffffff">
<font face="Verdana">

<table width=100%>
<tr>
<td width=10%> </td>
<td width=70% align="center">
</tr>
<tr></tr>
<tr>
<td width=10%> </td>
<td width=70% align="center">

<hr color="red">

<h1><tt><font color="#FF0000">Static Source Code Analysis Tools for C</font></tt></h1>
<hr color="red">
</td>
<td width=20%> </td>
</tr>

<tr>
<td width=10%> </td>
<td width=70%>

<ul>
<li><h4><font color="#0000FF">The Leading Commercial Tools</font></h4>
	<ul>
	<li><a href="http://semmle.com">Semmle/ (Odasa)</a>
	<br>
	A relatively new tool, based on the research of <a href="http://uk.linkedin.com/in/oegedemoor">Oege de Moor</a>
	at Oxford University's Computing Laboratory. The tool takes a different approach
	that can be quite effective. It first constructs a database that captures all essential
	information about a (potentially large) application, and then allows the user to perform
	queries on this database to verify the properties of interest. Standard static analysis
	queries are handled efficiently. With some practice, the queries are not that hard to
	write, and a large selection of predefined queries comes with the tool that can fairly
	easily be adapted to local requirements. Rule checkers for the
	<a href="http://spinroot.com/p10">Power of Ten coding rules</a> are provided,
	which makes it attractive for checking and maintaining high integrity applications.
	The tool gives accurate results and, once the database
	is built for a new application, queries are resolved very fast.
	Recommended, especially if you want to develop your own queries.

	<li><a href="http://coverity.com">Coverity</a>
	<br>
	A popular tool based on <a href="http://www.stanford.edu/~engler/ ">Dawson Engler</a>'s
	methodology for source code analysis of large code bases. An extended version
	of the tool (Coverity Extend) supports user-defined properties
	written in a successor to Dawson's Metal language.
	The tool is reasonably fast and returns few false positives.
	The latest versions supports an option to choose between
	three levels of aggressiveness, with the number of reports increasing (and the
	number of possible false positives going up) at the higher levels.
	Recommended as a default checker, especially if no customization is required.

	<li><a href="http://www.grammatech.com/products/codesonar/overview.html">CodeSonar</a> (by Grammatech)
	<br>An effective tool for spotting code defects and suspicious code fragments.
	The tool also provides rules checkers for the
	<a href="http://spinroot.com/p10">Power of Ten coding rules</a>.
	Especially good at inter-procedural analysis. It can be slow on large code bases.
	A capability for user-defined checks is available.

	<li><a href="http://klocwork.com">KlocWork</a>
	<br>
	Support for static error detection, with added project management
	and project visualization capabilities. Fast, almost as thorough as
	Coverity, and not quite as expensive. Especially good at finding array bound violations.
	A capability for user-defined checks is available, including checkers for the
	<a href="http://spinroot.com/p10">Power of Ten coding rules</a>.

	<li><a href="http://frama-c.com/">Frama-C</a>
	<br>
	(From <a class="__cf_email__" href="/cdn-cgi/l/email-protection" data-cfemail="b6d2dbd3d8c2c4d3f6dadfd8c3ce9bd0c4d7d8d5d398d9c4d1">[email&#160;protected]</a><script data-cfhash='f9e31' type="text/javascript">/* <![CDATA[ */!function(t,e,r,n,c,a,p){try{t=document.currentScript||function(){for(t=document.getElementsByTagName('script'),e=t.length;e--;)if(t[e].getAttribute('data-cfhash'))return t[e]}();if(t&&(c=t.previousSibling)){p=t.parentNode;if(a=c.getAttribute('data-cfemail')){for(e='',r='0x'+a.substr(0,2)|0,n=2;a.length-n;n+=2)e+='%'+('0'+('0x'+a.substr(n,2)^r).toString(16)).slice(-2);p.replaceChild(document.createTextNode(decodeURIComponent(e)),c)}p.removeChild(t)}}catch(u){}}()/* ]]> */</script>:) Frama-C is a framework for parsing and analysis of C code.
	The three main plug-ins are Value analysis (doing abstract interpretation
	like PolySpace or Astr√©e) and WP and Jessie (doing program proof in a Hoare-like framework).
	Frama-C is used by companies like Airbus and Dassault Aviation.

	<li><a href="http://www.cppdepend.com">CppDepend</a> A static analysis tool for C and C++,
	with a query language (CQLinq) and SQL-like query engine, similar to Semmle.

	<li><a href="http://www.polyspace.com">PolySpace</a>
	<br>
	Originally marketed by a French company co-founded by students of
	<a href="http://www.di.ens.fr/~cousot/">Patrick Cousot</a>
	(pioneer in the area of abstract interpretation).
	The company later became part of MathWorks and is now part of Matlab.
	Polyspace claims it can intercept 100% of the runtime errors in C programs.
	(See <a href="http://www.polyspace.com/product_datasheet/cverifier.htm">
	cverifier.htm</a>.)
	Customers are in the airline industry and the European space program.
	Can be thorough, but also very slow, and does not scale beyond
	a few thousand lines of code. Does not support full ANSI-C language
	(e.g., it places restrictions on the use of gotos).

	<li><a href="http://www.rational.com/products/pqc/index.jsp">Purify</a> (by Rational)
	<br>
	This tool is focused primarily on the detection of memory leaks, and not on
	general source code analysis. It is used fairly broadly.

	<li>The Lint family, e.g.
	<a href="http://www.gimpel.com/lintinfo.htm">PC-Lint/FlexeLint</a> (by Gimpel),
	<a href="http://www.cleanscape.net/stdprod/lplus/">Lint Plus</a> (by Cleanscape)
	<br> Generic source code analysis, value tracking, some types of array indexing errors.
	Suffers from high, sometimes very high, false positive rates, but the
	output can be customized with flags and code annotations.

	<li><a href="http://research.microsoft.com/users/jpincus/icsm.ppt">
	PREfix and PREfast</a> (Microsoft)
	<br>
	PREfix was developed by <a href="http://research.microsoft.com/users/jpincus/">
	Jon Pincus</a>;
	MicroSoft acquired the tool when it bought Pincus' company.
	PREfast is a lighter weight tool, developed within Microsoft
	as a faster alternative to PREfix (though it is said not to be
	directly based on PREfix). Both tools are reported to be
	effective in intercepting defects early, and come with
	filtering methods for the output to reduce false positives.
	PREfast allows for new defect patterns to be defined via plugins.
	Less than 10% of the code of PREfix is said to be concerned with analysis
	per se, most applies to the filtering and presentation of output, to
	reduce the number of false positives.

	<li><a href="http://www.programmingresearch.com">QAC</a> (by Programming Research)
	<br>Includes checkers for compliance with the MISRA-2004 guidelines for
	the development of C code. It does a thorough job.

	<li><a href="http://www.saferc.com">Safer C</a> (by Oakwood Computing)
	<br>  Based on L. Hatton's 1995 book on Safer C, out of print in the U.S.,
	covering code analysis and enforcement of coding guidelines. Not found to be too
	useful in our tests.

	<li><a href="http://www.redlizards.com">Goanna</a> (by Red Lizard) <font color=red>(new)</font> 
	<br>A new entry, based on model checking of the control flow graph of C programs.
	The technology is similar to Bell Labs' early
	<a href="http://cm.bell-labs.com/cm/cs/what/feaver/index.html">FeaVer<a/>
	and <a href="http://cm.bell-labs.com/cm/cs/what/modex/">Modex</a> tools
	(which used Spin as the model checker in the verification of C code).
	Not evaluated.

	<li><a href="http://www.viva64.com">PVS-Studio</a> (not related to the well-known
	PVS theorem prover), a static analyzer for C and C++. Not evaluated, but it is discussed
	<a href="www.altdevblogaday.com/2011/12/24/static-code-analysis/">here</a>.
	(thanks to Hubert Garavel for the reference).

	</ul>
<p>
<li><h4><font color="#0000FF">Academic and Research tools</font></h4>
	<ul>
	<li><a href="http://www.cs.ubc.ca/~babic/index_calysto.htm">Calysto</a>
		<font color=red>(new)</font> a tool by Domagoj Babic
	<li><a href="http://saturn.stanford.edu/pages/relatedindex.html">Saturn</a>
		<font color=red>(new)</font> by Alex Aiken and others at Stanford.
	<li><a href="http://mygcc.free.fr/">mygcc</a> <font color=red>(new)</font>
	<br>	An extension of the gcc compiler supporting user-defined
		checks written in a simple formalism, that can be checked efficiently.
		Path queries can be run on the control-flow graph of
		functions, specifying a start node, a stop node, and constraints on the
		path in between.
		Sample queries are provided that match many of the ones used in Engler's
		early study using the Metal language (now supported by the Coverity tool).
		A very interesting project that will hopefully find its
		way into the main gcc distribution soon.

	<li><a href="http://research.compaq.com/SRC/esc/EscModula3.html">ESC</a> (Compaq/HP)
	<br>	Extended static checker for Java and for Modula3.
		developed by <a href="http://research.compaq.com/SRC/staff/gnelson/">
		Greg Nelson</a> and colleagues, which
		is based on a mix of theorem proving and static analysis.
		It's thorough and effective, but also slow, and needs considerable knowledge
		to run. This tool does not target C, and therefore does not properly
		belong in this listing,
		but we include it as one of the landmark research tools in this domain.

	<li><a href="http://larch-www.lcs.mit.edu:8001/larch/lclint.html">LC-Lint</a>
	<br>	The descendent of the early research Unix version of lint, which was
		written by Steve Johnson in 1979. This tool needs lots of annotations to work well,
		and often produces overwhelming amounts of output.
<!--
	<li><a href="http://www.ispras.ru/~knizhnik/jlint/">JLint</a>
		a lint-like checker for Java code.
-->
	<li><a href="http://research.microsoft.com/vault/">Vault</a> (MicroSoft)
	<br>	An experimental system, in development at MicroSoft by
		<a href="http://research.microsoft.com/users/rdeline/">Rob DeLine</a>
		and <a href="http://research.microsoft.com/~maf/">Manuel Fahndrich</a>.
		It is based on formal annotations
		placed in the code.

	<li><a href="http://www.astree.ens.fr/">Astree</a> (CNRS, France)
	<br>	Astree is a static program analyzer for structured C programs,
		but without support for dynamic memory allocation and recursion
		(as used, for instance for embedded systems and in safety
		critical systems).
		The tool name is an acronym for Analyseur statique de
		logiciels temps-reel embarques (static analyzer for
		real-time embedded software). Among those working on
		this tool are Patrick and Radhia Cousot.

	<li><a href="http://ase.arc.nasa.gov/brat/cgs/">CGS</a> (C Global Surveyor, NASA ARC)
	<br>	An experimental tool at NASA Ames Research Center from
		<a href="http://ase.arc.nasa.gov/brat/">Guillaume Brat</a> and
		<a href="http://ase.arc.nasa.gov/people/venet/">Arnaud Venet</a>,
		based on abstract interpretation techniques, inspired by Patrick Cousot.
		Work in progress.

	<li><a href="http://cm.bell-labs.com/cm/cs/what/smlnj/doc/ckit/index.html">C-Kit</a> (Bell Labs).
	<br>	A research toolkit developed at Bell Labs, with algorithms for pointer alias analysis,
		program slicing,
		etc. for ANSI C. Written in SML. Can produce parsetree and symbol table information,
		but, as yet, not call flow graphs or function call graphs.
		The principal researchers involved in this work
		(<a href="http://cm.bell-labs.com/cm/cs/who/nch/">Nevin Heintze</a>,
		Jon Riecke, <a href="http://www.cs.uchicago.edu/people/dbm">Dave MacQueen</a>)
		are no longer at Bell Labs and development has stopped.

	<li><a href="http://spinroot.com/uno/">
		<font color=blue>Uno</font></a> (Bell Labs)
	<br>	Lightweight tool for static analysis.
		The tool is targeted at a small set of common programming
		defects (Uninitialized data, Nil-pointer dereferencing, and
		Out-of-bound array indexing, with the three initial letters giving
		the tool its name). It also handles a range of simple, user-defined properties.

	<li><a href="http://cm.bell-labs.com/cm/cs/what/orion/">Orion</a> (Bell Labs)
	<br>	Work in progress on an extension of Uno for C++, based on gcc.
	</ul>
<p>
<li><h4><font color="#0000FF">Other tools (Code Browsers; Development Environments)</font></h4>
	<ul><li>Programming Style or Guidelines Checkers
	<ul>
	<li><a href="http://www.parasoft.com">Parasoft CodeWizard</a>
	<li><a href="http://www.plumhall.com">Plum Hall SQS</a>
	<li><a href="http://www.bluestone-sw.com">CheckMate</a>
	</ul>
	<li><a href="http://www.grammatech.com/products/codesurfer/index.html">CodeSurfer</a>
	<br>	Supports data dependence analysis, program slicing for C,
		interprocedural flow analysis. The company was co-founded by
		<a href="http://www.cs.wisc.edu/~reps/">Tom Reps</a>.
		Very well done GUI. Mostly research applications. See also CodeSonar above.
	<li><a href="http://www.semdesigns.com/Products/Tools.html">Semantic Designs</a>
	<br>	Offers front-ends for many different languages,
		Supports some flow analysis.  Geared towards code transformations
		or re-engineering. Targets large code bases.
	</ul>
<p>
<li><h4><font color="#0000FF">Links</font></h4>
	<ul><li><a href="http://testingfaqs.org/t-static.html">http://testingfaqs.org/t-static.html</a>
<!--
	<li><a href="http://www.dse.nl/~thelosen/artikelen/static_analysis.pdf">
		Short white paper on the construction of static analyzers</a>
	<li><a href="http://www.programming-x.com/programming/analyzer.html">
	Another overview of static analyzers</a>
	<li><a href="http://samate.nist.gov/index.php/Source_Code_Analyzers">
	Up-to-date overview of source code checkers</a>
-->
	<li><a href="http://en.wikipedia.org/wiki/List_of_tools_for_static_code_analysis">Wikipedia entry</a>
	<font color=red>(new)</font>
</ul>
</ul>
</td><td width=20%> </td></tr>
</table>
</font>
<hr color="red">
<h4>Textbook</h4>
<ul><pre><a href="http://www.amazon.com/exec/obidos/ASIN/3540654100/spinroot-20">F. Nielson, H. R. Nielson and C. Hankin,
Principles of Program Analysis,
ISBN 3-540-65410-0, Springer-Verlag.</a>
</pre></ul>
<hr color="red">

<table width=100%><tr><td align=center>
<OBJECT classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
codebase="http://fpdownload.macromedia.com/get/flashplayer/current/swflash.cab"
id="Player_a6239436-3f35-49a9-8ca1-aab5624d5283"  WIDTH="486px"
HEIGHT="60px"> <PARAM NAME="movie"
VALUE="http://ws-na.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=US&ID=V20070822%2FUS%2Fspinroot-20%2F8009%2Fa6239436-3f35-49a9-8ca1-aab5624d5283&Operation=GetDisplayTemplate"><PARAM
NAME="quality" VALUE="high"><PARAM NAME="bgcolor"
VALUE="#FFFFFF"><PARAM NAME="allowscriptaccess" VALUE="always"><embed
src="http://ws-na.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=US&ID=V20070822%2FUS%2Fspinroot-20%2F8009%2Fa6239436-3f35-49a9-8ca1-aab5624d5283&Operation=GetDisplayTemplate"
id="Player_a6239436-3f35-49a9-8ca1-aab5624d5283" quality="high"
bgcolor="#ffffff" name="Player_a6239436-3f35-49a9-8ca1-aab5624d5283"
allowscriptaccess="always"  type="application/x-shockwave-flash"
align="middle" height="60px" width="486px"/> </OBJECT> <NOSCRIPT><A
HREF="http://ws-na.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=US&ID=V20070822%2FUS%2Fspinroot-20%2F8009%2Fa6239436-3f35-49a9-8ca1-aab5624d5283&Operation=NoScript">Amazon.com
Widgets</A></NOSCRIPT>
</td></tr></table>
<hr color="red">
<table width=100%>
<tr>
<td align="left">
last update 30 October 2014
</td>
<td align="right">
<a href="http://spinroot.com">spinroot.com</a>
</td></tr></table>
</body>
</html>
